import { Type } from '@fastify/type-provider-typebox';
import { FastifySchema } from 'fastify';
import { ERROR400, ERROR401, ERROR409, ERROR500 } from '@/constants/error.constant';

export const CreateUrlRequestSchema = Type.Object({
  url: Type.String({ format: 'regex', pattern: '^(https?://)', errorMessage: { format: 'Invalid URL' } }),
  customAlias: Type.Optional(Type.String({ minLength: 3, maxLength: 10 }))
});

export const CreateUrlResponseSchema = Type.Object({
  url: Type.String({ description: 'The URL given by user' }),
  shortUrl: Type.String({ description: 'The short URL generated by the system' }),
  alias: Type.Optional(Type.String({ description: 'Alias for the URL' })),
  customAlias: Type.Optional(
    Type.String({ description: 'Custom alias for the URL. This field will come if the user sets the custom alias' })
  )
});

export const ProcessUrlParamsSchema = Type.Object({
  alias: Type.Optional(Type.String({ description: 'The alias for the URL' }))
});

export const GetUrlQuerySchema = Type.Object({
  skip: Type.Optional(Type.String({ description: 'The number of documents to skip', default: 0 })),
  limit: Type.Optional(Type.String({ description: 'The number of documents to return', default: 50 })),
  alias: Type.Optional(Type.String({ description: 'The shortened URL Alias' })),
  url: Type.Optional(Type.String({ description: 'The URL given by user' }))
});

export const GetUrlResponseSchema = Type.Object({
  alias: Type.Optional(Type.String({ description: 'Alias for the URL' })),
  shortUrl: Type.String({ description: 'The short URL generated by the system' }),
  email: Type.String({ format: 'email', description: 'The email of the user who created the URL' }),
  userId: Type.String({ description: 'The user ID of the user who created the URL' }),
  url: Type.String({ description: 'The URL given by user' }),
  customAlias: Type.Boolean({ description: 'This field will return true if the user sets the custom alias' }),
  createdAt: Type.String({ description: 'The time when the URL was created' }),
  clicks: Type.Number({ description: 'The number of clicks on the URL' }),
  lastClicked: Type.Optional(Type.String({ description: 'The time when the URL was last clicked' }))
});

export const CreateUrlSchema: FastifySchema = {
  description: 'Create a new Shortened URL for a given URL',
  tags: ['url'],
  summary: 'Create a new Shortened URL',
  security: [
    {
      token: []
    }
  ],
  body: {
    type: 'object',
    required: ['url'],
    properties: {
      ...CreateUrlRequestSchema.properties
    }
  },
  response: {
    201: {
      description: 'Successful created URL',
      type: 'object',
      properties: {
        ...CreateUrlResponseSchema.properties
      }
    },
    400: ERROR400,
    401: ERROR401,
    409: ERROR409,
    500: ERROR500
  }
};

export const GetUrlSchema: FastifySchema = {
  description: 'Get a Shortened URL for a given alias',
  tags: ['url'],
  summary: 'Get a Shortened URL',
  security: [
    {
      token: []
    }
  ],
  querystring: {
    type: 'object',
    properties: GetUrlQuerySchema.properties
  },
  response: {
    200: {
      description: 'Successful get response',
      type: 'array',
      items: {
        type: 'object',
        properties: {
          ...GetUrlResponseSchema.properties
        }
      }
    },
    400: ERROR400,
    401: ERROR401,
    409: ERROR409,
    500: ERROR500
  }
};

export const ProcessUrlSchema: FastifySchema = {
  description: 'Process a Shortened URL for a given alias',
  tags: ['url'],
  summary: 'Process a Shortened URL',
  params: {
    type: 'object',
    properties: ProcessUrlParamsSchema.properties
  },
  response: {
    302: {
      description: 'Successful redirection',
      type: 'string'
    },
    400: ERROR400,
    401: ERROR401,
    409: ERROR409,
    500: ERROR500
  }
};
